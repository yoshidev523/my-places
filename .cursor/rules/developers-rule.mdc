---
alwaysApply: true
---

# My Places アプリケーション 開発者ガイドライン

## 1. アプリケーション概要

### 1.1 プロジェクト名
**My Places** - Google Places APIを使った場所検索アプリケーション

### 1.2 目的
Google Places APIのテキスト検索機能を使用して、ユーザーが場所を検索し、詳細情報（名前、住所、評価、営業時間、価格レベル）を表示するWebアプリケーション。

### 1.3 主要機能
- テキスト入力による場所検索
- 検索結果の一覧表示
- 場所の詳細情報表示（名前、住所、評価、営業時間、価格レベル）
- サーバーサイドレンダリング（SEO対応）

## 2. 技術スタック

### 2.1 フレームワーク・ライブラリ
```
- Next.js 14 (App Router)
- React 18
- TypeScript 5
- Tailwind CSS 3.4
- @googlemaps/google-maps-services-js
```

### 2.2 開発環境
```
- Node.js v18以上
- npm/yarn
- ESLint
- TypeScript
```

## 3. アーキテクチャ方針

### 3.1 基本方針
- **サーバーファースト**: 可能な限りサーバーコンポーネントで実装
- **型安全性**: TypeScriptを活用した完全な型安全性の確保
- **SEO最適化**: サーバーサイドレンダリングによるSEO対応
- **セキュリティ**: APIキーのサーバーサイド管理

### 3.2 レンダリング戦略
- **Server Components**: デフォルトでサーバーコンポーネントを使用
- **Client Components**: 必要最小限に留める（`'use client'`明記）
- **Server Actions**: フォーム処理にはサーバーアクションを使用

### 3.3 状態管理
- **URL State**: 検索クエリはURLパラメータで管理
- **Server State**: サーバーサイドでのデータフェッチ
- **Local State**: クライアントサイドの状態は最小限

## 4. ディレクトリ構造

```
src/
├── types/              # 型定義
│   ├── places.ts      # Places API関連の型
│   └── index.ts       # エクスポート
├── repositories/       # API呼び出しロジック
│   ├── placesRepository.ts
│   └── index.ts
├── app/               # Next.js App Router
│   ├── actions/       # サーバーアクション
│   │   └── searchPlaces.ts
│   ├── layout.tsx     # ルートレイアウト
│   └── page.tsx       # ホームページ
└── components/        # UIコンポーネント
    ├── Header.tsx
    ├── SearchForm.tsx
    ├── SearchResults.tsx
    ├── PlaceCard.tsx
    └── index.ts
```

## 5. 命名規則

### 5.1 ファイル・ディレクトリ
```
- Reactコンポーネントファイル: PascalCase (例: SearchForm.tsx)
- 非コンポーネントファイル: camelCase (例: searchPlaces.ts, placesRepository.ts)
- ディレクトリ名: kebab-case (例: components/, app/actions/)
- 型定義ファイル: camelCase (例: places.ts)
- インデックスファイル: index.ts (そのまま)
```

### 5.2 コード内命名
```typescript
// 変数・関数: camelCase
const searchQuery = 'tokyo station';
const getSearchResults = async () => {};

// 型・インターフェース: PascalCase
interface Place {}
type SearchPlacesParams = {};

// コンポーネント: PascalCase
export function SearchForm() {}

// 定数: SCREAMING_SNAKE_CASE
const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;
```

### 5.3 API関連命名
```typescript
// APIパラメータ: snake_case (Google Maps API準拠)
interface Place {
  place_id: string;
  formatted_address: string;
  user_ratings_total?: number;
}

// 内部関数: camelCase
const transformPlaceResult = (result: PlaceData) => {};
```

## 6. 型定義規則

### 6.1 型定義の配置
```typescript
// src/types/places.ts - Places API関連
export interface Place {
  place_id: string;
  name: string;
  // ...
}

// src/types/index.ts - 統一エクスポート
export * from './places';
```

### 6.2 型安全性の確保
```typescript
// 必須フィールドと任意フィールドの明確な区別
interface Place {
  place_id: string;        // 必須
  name: string;           // 必須
  rating?: number;        // 任意
}

// 関数の戻り値型を明示
async function searchPlaces(params: SearchPlacesParams): Promise<Place[]> {
  // ...
}
```

## 7. コンポーネント設計

### 7.1 コンポーネント分割方針
```
- 機能的な単位で適切に分割
- 単一責任の原則を遵守
- 再利用可能性を考慮
```

### 7.2 Propsの設計
```typescript
// インターフェースを明確に定義
interface PlaceCardProps {
  place: Place;
}

// デフォルト値を適切に設定
interface SearchResultsProps {
  places: Place[] | null;
  query?: string;
  error?: string | null;
}
```

### 7.3 TSDoc記述
```typescript
/**
 * 場所検索フォームコンポーネント
 * 
 * @description サーバーアクションを使用してフォーム送信を処理
 * @returns JSX要素
 */
export function SearchForm() {
  // ...
}
```

## 8. API統合

### 8.1 Google Maps Services統合
```typescript
// @googlemaps/google-maps-services-jsを使用
import { Client, PlaceData, Language } from '@googlemaps/google-maps-services-js';

// リポジトリパターンでAPI呼び出しを抽象化
export class PlacesRepository {
  private client: Client;
  private apiKey: string;
  // ...
}
```

### 8.2 エラーハンドリング
```typescript
// 適切なエラーメッセージとログ出力
try {
  const results = await repository.searchPlaces(params);
  return results;
} catch (error) {
  console.error('Search places error:', error);
  return null;
}
```

## 9. 環境設定

### 9.1 環境変数
```bash
# .env.local
GOOGLE_MAPS_API_KEY=your_api_key_here

# 注意: サーバーサイド用のため NEXT_PUBLIC_ プレフィックス不要
```

### 9.2 必要なAPI設定
```
Google Cloud Console で以下のAPIを有効化:
- Places API (新版またはLegacy)
- Geocoding API (推奨)
```

## 10. パフォーマンス

### 10.1 最適化方針
```
- サーバーサイドレンダリング優先
- 必要最小限のJavaScript配信
- 画像最適化（Next.js Image component使用推奨）
- APIレスポンスの効率的な変換
```

### 10.2 キャッシュ戦略
```typescript
// 将来的な拡張: Next.js App Routerのキャッシュ機能活用
// fetch with cache options
const response = await fetch(url, {
  next: { revalidate: 3600 } // 1時間キャッシュ
});
```

## 11. GitとPR管理

### 11.1 プルリクエスト作成ガイドライン

#### 11.1.1 タイトル命名規則
```
- feat: 新機能追加
- fix: バグ修正
- docs: ドキュメント更新
- style: コードスタイルの変更
- refactor: リファクタリング
- test: テストの追加・修正
- chore: その他の変更

例: feat: Supabaseセットアップとデータベース設定を追加
```

#### 11.1.2 PR作成時の注意点
- **タイトルは簡潔に**: 変更内容を50文字以内で要約
- **説明文は簡潔にまとめること**: 重要なポイントのみを含める
- **影響範囲を明記**: 新規追加 / 既存機能への影響
- **次のステップを記載**: 必要に応じてTODOリストを含める

#### 11.1.3 PR説明文のテンプレート
```markdown
## 概要
[変更内容の簡潔な説明]

## 変更内容
- [主要な変更点1]
- [主要な変更点2]

## 影響範囲
- [影響のある機能や範囲]

## 次のステップ
- [ ] [必要な次の作業があれば記載]
```

### 11.2 コミットメッセージ
```
- 1行目: 変更概要（50文字以内）
- 2行目: 空行
- 3行目以降: 詳細説明（必要に応じて）

例:
feat: Supabaseセットアップとデータベース設定を追加

- config.tomlファイルの追加
- マイグレーション管理ルールの策定
- 開発環境の拡張
```
# My Places アプリケーション 開発者ガイドライン

## 1. アプリケーション概要

### 1.1 プロジェクト名
**My Places** - Google Places APIを使った場所検索アプリケーション

### 1.2 目的
Google Places APIのテキスト検索機能を使用して、ユーザーが場所を検索し、詳細情報（名前、住所、評価、営業時間、価格レベル）を表示するWebアプリケーション。

### 1.3 主要機能
- テキスト入力による場所検索
- 検索結果の一覧表示
- 場所の詳細情報表示（名前、住所、評価、営業時間、価格レベル）
- サーバーサイドレンダリング（SEO対応）

## 2. 技術スタック

### 2.1 フレームワーク・ライブラリ
```
- Next.js 14 (App Router)
- React 18
- TypeScript 5
- Tailwind CSS 3.4
- @googlemaps/google-maps-services-js
```

### 2.2 開発環境
```
- Node.js v18以上
- npm/yarn
- ESLint
- TypeScript
```

## 3. アーキテクチャ方針

### 3.1 基本方針
- **サーバーファースト**: 可能な限りサーバーコンポーネントで実装
- **型安全性**: TypeScriptを活用した完全な型安全性の確保
- **SEO最適化**: サーバーサイドレンダリングによるSEO対応
- **セキュリティ**: APIキーのサーバーサイド管理

### 3.2 レンダリング戦略
- **Server Components**: デフォルトでサーバーコンポーネントを使用
- **Client Components**: 必要最小限に留める（`'use client'`明記）
- **Server Actions**: フォーム処理にはサーバーアクションを使用

### 3.3 状態管理
- **URL State**: 検索クエリはURLパラメータで管理
- **Server State**: サーバーサイドでのデータフェッチ
- **Local State**: クライアントサイドの状態は最小限

## 4. ディレクトリ構造

```
src/
├── types/              # 型定義
│   ├── places.ts      # Places API関連の型
│   └── index.ts       # エクスポート
├── repositories/       # API呼び出しロジック
│   ├── placesRepository.ts
│   └── index.ts
├── app/               # Next.js App Router
│   ├── actions/       # サーバーアクション
│   │   └── searchPlaces.ts
│   ├── layout.tsx     # ルートレイアウト
│   └── page.tsx       # ホームページ
└── components/        # UIコンポーネント
    ├── Header.tsx
    ├── SearchForm.tsx
    ├── SearchResults.tsx
    ├── PlaceCard.tsx
    └── index.ts
```

## 5. 命名規則

### 5.1 ファイル・ディレクトリ
```
- Reactコンポーネントファイル: PascalCase (例: SearchForm.tsx)
- 非コンポーネントファイル: camelCase (例: searchPlaces.ts, placesRepository.ts)
- ディレクトリ名: kebab-case (例: components/, app/actions/)
- 型定義ファイル: camelCase (例: places.ts)
- インデックスファイル: index.ts (そのまま)
```

### 5.2 コード内命名
```typescript
// 変数・関数: camelCase
const searchQuery = 'tokyo station';
const getSearchResults = async () => {};

// 型・インターフェース: PascalCase
interface Place {}
type SearchPlacesParams = {};

// コンポーネント: PascalCase
export function SearchForm() {}

// 定数: SCREAMING_SNAKE_CASE
const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY;
```

### 5.3 API関連命名
```typescript
// APIパラメータ: snake_case (Google Maps API準拠)
interface Place {
  place_id: string;
  formatted_address: string;
  user_ratings_total?: number;
}

// 内部関数: camelCase
const transformPlaceResult = (result: PlaceData) => {};
```

## 6. 型定義規則

### 6.1 型定義の配置
```typescript
// src/types/places.ts - Places API関連
export interface Place {
  place_id: string;
  name: string;
  // ...
}

// src/types/index.ts - 統一エクスポート
export * from './places';
```

### 6.2 型安全性の確保
```typescript
// 必須フィールドと任意フィールドの明確な区別
interface Place {
  place_id: string;        // 必須
  name: string;           // 必須
  rating?: number;        // 任意
}

// 関数の戻り値型を明示
async function searchPlaces(params: SearchPlacesParams): Promise<Place[]> {
  // ...
}
```

## 7. コンポーネント設計

### 7.1 コンポーネント分割方針
```
- 機能的な単位で適切に分割
- 単一責任の原則を遵守
- 再利用可能性を考慮
```

### 7.2 Propsの設計
```typescript
// インターフェースを明確に定義
interface PlaceCardProps {
  place: Place;
}

// デフォルト値を適切に設定
interface SearchResultsProps {
  places: Place[] | null;
  query?: string;
  error?: string | null;
}
```

### 7.3 TSDoc記述
```typescript
/**
 * 場所検索フォームコンポーネント
 * 
 * @description サーバーアクションを使用してフォーム送信を処理
 * @returns JSX要素
 */
export function SearchForm() {
  // ...
}
```

## 8. API統合

### 8.1 Google Maps Services統合
```typescript
// @googlemaps/google-maps-services-jsを使用
import { Client, PlaceData, Language } from '@googlemaps/google-maps-services-js';

// リポジトリパターンでAPI呼び出しを抽象化
export class PlacesRepository {
  private client: Client;
  private apiKey: string;
  // ...
}
```

### 8.2 エラーハンドリング
```typescript
// 適切なエラーメッセージとログ出力
try {
  const results = await repository.searchPlaces(params);
  return results;
} catch (error) {
  console.error('Search places error:', error);
  return null;
}
```

## 9. 環境設定

### 9.1 環境変数
```bash
# .env.local
GOOGLE_MAPS_API_KEY=your_api_key_here

# 注意: サーバーサイド用のため NEXT_PUBLIC_ プレフィックス不要
```

### 9.2 必要なAPI設定
```
Google Cloud Console で以下のAPIを有効化:
- Places API (新版またはLegacy)
- Geocoding API (推奨)
```

## 10. パフォーマンス

### 10.1 最適化方針
```
- サーバーサイドレンダリング優先
- 必要最小限のJavaScript配信
- 画像最適化（Next.js Image component使用推奨）
- APIレスポンスの効率的な変換
```

### 10.2 キャッシュ戦略
```typescript
// 将来的な拡張: Next.js App Routerのキャッシュ機能活用
// fetch with cache options
const response = await fetch(url, {
  next: { revalidate: 3600 } // 1時間キャッシュ
});
```

## 11. GitとPR管理

### 11.1 プルリクエスト作成ガイドライン

#### 11.1.1 タイトル命名規則
```
- feat: 新機能追加
- fix: バグ修正
- docs: ドキュメント更新
- style: コードスタイルの変更
- refactor: リファクタリング
- test: テストの追加・修正
- chore: その他の変更

例: feat: Supabaseセットアップとデータベース設定を追加
```

#### 11.1.2 PR作成時の注意点
- **タイトルは簡潔に**: 変更内容を50文字以内で要約
- **説明文は簡潔にまとめること**: 重要なポイントのみを含める
- **影響範囲を明記**: 新規追加 / 既存機能への影響
- **次のステップを記載**: 必要に応じてTODOリストを含める

#### 11.1.3 PR説明文のテンプレート
```markdown
## 概要
[変更内容の簡潔な説明]

## 変更内容
- [主要な変更点1]
- [主要な変更点2]

## 影響範囲
- [影響のある機能や範囲]

## 次のステップ
- [ ] [必要な次の作業があれば記載]
```

### 11.2 コミットメッセージ
```
- 1行目: 変更概要（50文字以内）
- 2行目: 空行
- 3行目以降: 詳細説明（必要に応じて）

例:
feat: Supabaseセットアップとデータベース設定を追加

- config.tomlファイルの追加
- マイグレーション管理ルールの策定
- 開発環境の拡張
```